diff --git a/CMakeLists.txt b/CMakeLists.txt
index 366d0d9..3275d33 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,10 @@
 
 cmake_minimum_required(VERSION 3.5)
 
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
 project(OpenGLTutorial)
 
 include_directories("./include")
@@ -33,12 +37,3 @@ add_executable (${CMAKE_PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)
 
 target_link_libraries(${CMAKE_PROJECT_NAME} glfw Core)
 
-# Set include directories
-
-
-# Copy shaders to build directory
-file(COPY shaders DESTINATION ${CMAKE_BINARY_DIR})
-
-# Set C++ standard
-set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 11)
-set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)
diff --git a/README.md b/README.md
index e997f26..2f29dc6 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,3 @@
-# engine
\ No newline at end of file
+# Project Created By Zach Simopoulos, Michael Yu, and Binh Mai for project 3 of vanderbilt Computational Creativity Spring 2023
+## video link of final project demo:
+https://drive.google.com/file/d/11YdTVUXIyCJxQnkeJ9LCMVCxcPjlioDH/view?usp=sharing
diff --git a/include/Camera.hpp b/include/Camera.hpp
index 1ff85ff..cf6db29 100644
--- a/include/Camera.hpp
+++ b/include/Camera.hpp
@@ -3,13 +3,14 @@
 
 #include <glm/glm.hpp>
 #include <glm/gtc/matrix_transform.hpp>
+#include <glad.h>
 #include <glfw3.h>
 #include "Window.hpp"
 
 class Camera
 {
 public:
-    Camera(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f),
+    Camera(glm::vec3 position = glm::vec3(0.0f, 0.0f, 3.0f),
         glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f),
         float yaw = -90.0f, float pitch = 0.0f);
 
diff --git a/include/Cube.hpp b/include/Cube.hpp
index 04a8356..5c80594 100644
--- a/include/Cube.hpp
+++ b/include/Cube.hpp
@@ -1,7 +1,7 @@
 #pragma once
+//included glew, not glad and did not include shaders
 
-#include <GL/glew.h>
-
+#include "Shader.hpp"
 class Cube
 {
 public:
diff --git a/include/Shader.hpp b/include/Shader.hpp
index f5bab6f..1d5e322 100644
--- a/include/Shader.hpp
+++ b/include/Shader.hpp
@@ -6,7 +6,8 @@
 #include <sstream>
 #include <iostream>
 
-#include <glad/glad.h>
+#include <glad.h>
+#include <glfw3.h>
 #include <glm/glm.hpp>
 #include <glm/gtc/type_ptr.hpp>
 
diff --git a/include/Window.hpp b/include/Window.hpp
index 516b545..96ea22b 100644
--- a/include/Window.hpp
+++ b/include/Window.hpp
@@ -1,7 +1,9 @@
 #ifndef WINDOW_HPP
 #define WINDOW_HPP
 
-#include <GLFW/glfw3.h>
+#include <iostream>
+#include <glad.h>
+#include <glfw3.h>
 
 class Window
 {
@@ -9,11 +11,12 @@ public:
     Window(int width, int height, const char* title);
     ~Window();
 
-    bool shouldClose() const;
+    bool shouldClose();
     void swapBuffers();
-
-private:
+    GLFWwindow* getWindow() { return m_window; };
     GLFWwindow* m_window;
+private:
+    
 };
 
 #endif // WINDOW_HPP
diff --git a/shaders/fragment_shader.glsl b/shaders/fragment_shader.glsl
index 472f29c..d9b8d16 100644
--- a/shaders/fragment_shader.glsl
+++ b/shaders/fragment_shader.glsl
@@ -1,4 +1,15 @@
 #version 330 core
+
+out vec4 FragColor;
+
+in vec3 ourColor;
+
+void main()
+{
+    FragColor = vec4(1.0,0.0,0.0, 1.0f);
+}
+/*
+#version 330 core
 in vec3 ourColor;
 in vec3 Normal;
 in vec3 FragPos;
@@ -31,4 +42,4 @@ void main()
     vec3 result = (ambient + diffuse + specular) * ourColor;
     FragColor = vec4(result, 1.0);
 
-}
\ No newline at end of file
+}*/
\ No newline at end of file
diff --git a/shaders/vertex_shader.glsl b/shaders/vertex_shader.glsl
index 5d17439..2f9c976 100644
--- a/shaders/vertex_shader.glsl
+++ b/shaders/vertex_shader.glsl
@@ -1,4 +1,22 @@
 #version 330 core
+
+layout (location = 0) in vec3 aPos;
+layout (location = 1) in vec3 aColor;
+
+out vec3 ourColor;
+
+uniform mat4 model;
+uniform mat4 view;
+uniform mat4 projection;
+
+void main()
+{
+    gl_Position = projection * view * model * vec4(aPos, 1.0f);
+    ourColor = aColor;
+}
+
+/*
+#version 330 core
 layout (location = 0) in vec3 aPos;   // the position variable has attribute position 0
 layout (location = 1) in vec3 aNormal;   // the position variable has attribute position 0
 
@@ -17,4 +35,4 @@ void main()
     FragPos = vec3(model * vec4(aPos, 1.0));
     Normal = aNormal;
     ourColor = entityColor;
-}   
\ No newline at end of file
+}  */ 
\ No newline at end of file
diff --git a/src/Camera.cpp b/src/Camera.cpp
index 9df69d3..405f01c 100644
--- a/src/Camera.cpp
+++ b/src/Camera.cpp
@@ -26,17 +26,17 @@ void Camera::update(const Window& window)
     lastFrame = currentFrame;
 
     float cameraSpeed = 2.5f * deltaTime;
-    if (glfwGetKey(window.getWindow(), GLFW_KEY_W) == GLFW_PRESS)
+    if (glfwGetKey(window.m_window, GLFW_KEY_W) == GLFW_PRESS)
         m_position += cameraSpeed * m_front;
-    if (glfwGetKey(window.getWindow(), GLFW_KEY_S) == GLFW_PRESS)
+    if (glfwGetKey(window.m_window, GLFW_KEY_S) == GLFW_PRESS)
         m_position -= cameraSpeed * m_front;
-    if (glfwGetKey(window.getWindow(), GLFW_KEY_A) == GLFW_PRESS)
+    if (glfwGetKey(window.m_window, GLFW_KEY_A) == GLFW_PRESS)
         m_position -= glm::normalize(glm::cross(m_front, m_up)) * cameraSpeed;
-    if (glfwGetKey(window.getWindow(), GLFW_KEY_D) == GLFW_PRESS)
+    if (glfwGetKey(window.m_window, GLFW_KEY_D) == GLFW_PRESS)
         m_position += glm::normalize(glm::cross(m_front, m_up)) * cameraSpeed;
 
     double xpos, ypos;
-    glfwGetCursorPos(window.getWindow(), &xpos, &ypos);
+    glfwGetCursorPos(window.m_window, &xpos, &ypos);
     if (m_firstMouse)
     {
         m_lastX = xpos;
diff --git a/src/Cube.cpp b/src/Cube.cpp
index 2770a77..8d0f0b2 100644
--- a/src/Cube.cpp
+++ b/src/Cube.cpp
@@ -46,14 +46,14 @@ Cube::Cube()
     // Bind VBO and EBO and upload data
     glBindBuffer(GL_ARRAY_BUFFER, VBO);
     glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
-
-    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
-    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
-
+   
     // Set vertex attribute pointers
     glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
     glEnableVertexAttribArray(0);
 
+    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
+    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
+
     // Unbind VAO
     glBindVertexArray(0);
 }
@@ -62,6 +62,7 @@ void Cube::draw(Shader& shader)
 {
     // Bind VAO
     glBindVertexArray(VAO);
+    glEnableVertexAttribArray(0);
 
     // Draw cube
     glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);
diff --git a/src/Shader.cpp b/src/Shader.cpp
index 456f94e..f0d4d10 100644
--- a/src/Shader.cpp
+++ b/src/Shader.cpp
@@ -68,4 +68,46 @@ void Shader::setBool(const std::string& name, bool value) const
     glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value);
 }
 
-void Shader::setInt(const std::string& name,
\ No newline at end of file
+void Shader::setInt(const std::string& name, int value) const
+{
+    glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
+}
+
+void Shader::setFloat(const std::string& name, float value) const
+{
+    glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
+}
+
+void Shader::setVec3(const std::string& name, const glm::vec3& value) const
+{
+    glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, glm::value_ptr(value));
+}
+
+void Shader::setMat4(const std::string& name, const glm::mat4& value) const
+{
+    glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, glm::value_ptr(value));
+}
+
+void Shader::checkCompileErrors(unsigned int shader, std::string type)
+{
+    int success;
+    char infoLog[1024];
+    if (type != "PROGRAM")
+    {
+        glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
+        if (!success)
+        {
+            glGetShaderInfoLog(shader, 1024, NULL, infoLog);
+            std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
+        }
+    }
+    else
+    {
+        glGetProgramiv(shader, GL_LINK_STATUS, &success);
+        if (!success)
+        {
+            glGetProgramInfoLog(shader, 1024, NULL, infoLog);
+            std::cout << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
+        }
+    }
+}
diff --git a/src/Window.cpp b/src/Window.cpp
index 1967e30..ae9e438 100644
--- a/src/Window.cpp
+++ b/src/Window.cpp
@@ -15,6 +15,13 @@ Window::Window(int width, int height, const char* title)
 
     // Make the window's context current
     glfwMakeContextCurrent(m_window);
+
+    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
+    {
+        std::cout << "Failed to initialize OpenGL context" << std::endl;
+        return;
+    }
+
 }
 
 Window::~Window()
@@ -26,7 +33,7 @@ Window::~Window()
     glfwTerminate();
 }
 
-bool Window::shouldClose() const
+bool Window::shouldClose()
 {
     // Check if the GLFW window should close
     return glfwWindowShouldClose(m_window);
diff --git a/src/main.cpp b/src/main.cpp
index e803911..aaf2ab9 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1,8 +1,8 @@
 #include <iostream>
 #include "Cube.hpp"
 #include "Camera.hpp"
-#include "Shader.hpp"
 #include "Window.hpp"
+#include "Shader.hpp"
 
 int main()
 {
@@ -16,12 +16,16 @@ int main()
     Cube cube;
 
     // Initialize shader
-    Shader shader("shaders/vertex.shader", "shaders/fragment.shader");
+    Shader shader("C:\\Users\\zachs\\vandy-c\\cc\\p3\\code\\shaders\\vertex_shader.glsl", 
+        "C:\\Users\\zachs\\vandy-c\\cc\\p3\\code\\shaders\\fragment_shader.glsl");
 
     // Render loop
     while (!window.shouldClose())
     {
         // Clear screen
+        glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
+        glClear(GL_COLOR_BUFFER_BIT);
+        glEnable(GL_DEPTH_TEST);
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
         // Update camera
@@ -30,9 +34,9 @@ int main()
         // Draw cube
         shader.use();
         shader.setMat4("view", camera.getViewMatrix());
+        shader.setMat4("model", glm::mat4(1.0f));
         shader.setMat4("projection", camera.getProjectionMatrix());
         cube.draw(shader);
-
         // Swap buffers
         window.swapBuffers();
     }
